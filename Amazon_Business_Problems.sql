--Amazon sales Analysis Projects

-- --------------------------------------------------------
--Exploratory Data Analysis and preprocessing
-- --------------------------------------------------------

select * from customers;
select * from orders;
select * from products;
select * from returns;
select * from sellers;

-- --------------------------------------------------------------
--Amazon business problem1
-- --------------------------------------------------------------

--1.what is the total revenue generated?
select sum(sale) as total_revenue
from orders
	
--2.How many products do we have?
select count(*) from products

--3.Find  out top 5 order details by sales amount?
select * from orders
order by sale desc

--4.What is the average order value?
select avg(sale) as average_order
from orders
	
--5.What is the total sale for GOA?
select sum(sale) as total_sale_goa
from orders
where state = 'Goa'

--6.How many unique customers have placed orders?
select count(distinct customer_id) 
from orders
-- -------------------------------------------------
--Amazon business problem 2
-- -------------------------------------------------
	
--Que1. What is the total sales revenue generated by each state?
select 
	state,
	sum(sale) as total_sales_revenue
from orders
where state is not null
group by 1
	
--Que2. How many orders were placed by each customer,and what is their average order quantity?
select  
	customer_id,
	count(order_id),
	round(avg(quantity),2) as avg_order_quantity 
from orders
group by 1

--Que3. Which category has the highest average sale amount per order?
select * from orders;	
select 
	category,order_id,avg(sale)as avg_sale_amount
	from orders
	group by 1,2
	order by 3 desc
	limit 1
	
--que4. Identify the top 3 best selling products(subcategories) in terms of total quantity sold.
select sub_category,product_id,sum(quantity)as total_quantity_sold
	from orders
group by 1,2
order by 3 desc
limit 3

--que5. Which is the best selling month in 2022 based on revenue?
select 
	to_char(order_date,'Month'),
	sum(sale) as revenue
from orders
	where extract(year from order_date) = '2022'
	group by 1
	order by 2 desc
	limit 3

--Que6. Find top 3 products and revenue generated having revenue>10000
select 
	product_id,
	sum(sale)as revenue
from orders
group by product_id	
having sum(sale)>10000
order by sum(sale) desc
limit 3
-- -----------------------------------------------------------------------------
--Amazon business problems for projects
-- -----------------------------------------------------------------------------
/*
1. Find out the top 5 customers who made the highest profits.
2. Find out the average quantity ordered per category.
3. Identify the top 5 products that have generated the highest revenue. 
4.Determine the top 5 products whose revenue has decreased compared to the
previous year.
5. Identify the highest profitable sub-category.
6. Find out the states with the highest total orders.
7. Determine the month with the highest number of orders.
8. Calculate the profit margin percentage for each sale (Profit divided by Sales).
9. Calculate the percentage contribution of each sub-category
10.Identify top 2 category that has received maximum returns and their return %
*/

--Que1: Find out the top 5 customers who made the highest profits.

select customer_id,sum(profits) as total_profits
from
(
	select 
		o.customer_id,
		o.product_id,
		o.price_per_unit,
		o.quantity,
		o.sale,
		p.cogs,
		o.sale - (p.cogs * o.quantity) as profits
	from orders o
	join products p
	on o.product_id = p.product_id
) as s1
group by 1
order by 2 desc
limit 5

--Que2.Find out the average quantity ordered per category.

select 
	category,
	avg(quantity) as avg_qty_ordered
from orders
where category is not null
group by 1

--Que3. Identify the top 5 products that have generated the highest revenue.

select 
	o.product_id,
	p.product_name,
	sum(o.sale) as revenue
from orders o
join products p
on o.product_id = p.product_id
group by 1,2
order by 3 desc
limit 5

--Que4.Determine the top 5 products whose revenue has decreased compared to the previous year.
select * from orders
with cte1 as
(
select 
	o.product_id,
	p.product_name,
	sum(o.sale) as Previous_year_revenue
from orders o
join products p
on o.product_id = p.product_id
where extract(year from order_date)=extract(year from current_date)-1
group by 1,2
),
cte2 as
(
select 
	o.product_id,
	p.product_name,
	sum(o.sale) as current_year_revenue
from orders o
join products p
on o.product_id = p.product_id
where extract(year from order_date)=extract(year from current_date)
group by 1,2	
)
select 
	case when cte1.previous_year_revenue > cte2.current_year_revenue then cte1.product_name end,
	cte1.product_id,
	cte1.product_name,
	cte1.previous_year_revenue,
	cte2.current_year_revenue
	
from cte1
join cte2
on cte1.product_id = cte2.product_id
where case when cte1.previous_year_revenue > cte2.current_year_revenue then cte1.product_name end is not null
order by 3 desc,4 desc
limit 5

--Que5. Identify the highest profitable sub-category.
select 
	o.sub_category,
	sum(o.sale - (p.cogs * o.quantity)) as total_profit
from orders o
join products p
on o.product_id = p.product_id
group by 1
order by 2 desc
limit 1

--Que6.Find out the states with the highest total orders.
select 
	state,
	total_orders
from
(
select 
	state,
	count(order_id) as total_orders,
	dense_rank()over(order by count(order_id) desc) as dnk
from orders
group by 1
) as s1
where dnk=1

--Que7.Determine the month with the highest number of orders.
select 
	to_char(order_date,'Month'),
	count(order_id) as total_order_count
from orders
group by 1
order by 2 desc
limit 1

--Que8. Calculate the profit margin percentage for each sale (Profit divided by Sales).
select * from orders
select (o.sale - (p.cogs * o.quantity))/o.sale * 100 as profit_margin_percent
	from orders o
join products p
on o.product_id = p.product_id

--Que9. Calculate the percentage contribution of each sub-category
with cte1 as
(
select 
	sub_category,
	sum(sale) as sale_per_subcategory
from orders
	where sub_category is not null
group by 1
)
select 
	sub_category,
	(sale_per_subcategory / total_sales) * 100 as percent_contribution
from cte1
cross join
(
select 
	sum(sale) as total_sales 
	from orders
)as cte2;
	
--Que10.Identify top 2 category that has received maximum returns and their return %
select 
	o.category,
    count(r.return_id) as count_return_each_category,
	round(count(r.return_id)::decimal / count(*)::decimal * 100,2) as return_percentage
from orders o
left join returns r
on o.order_id = r.order_id
where category is not null
group by 1
order by 2 desc
limit 2

--End of projects